#!/bin/bash

echo
echo "============================================================================================================================================="
echo "                                                     Informace o tv√©m s√≠≈•ov√©m rozhran√≠                                                       "
echo "============================================================================================================================================="
echo

ETH="$(ifconfig | grep -i -m 1 "eth0")"
echo $ETH
echo
echo -e "$(ifconfig | grep -oP 'mtu \K\d+' | awk '{print "mtu:\t\t" $0}')"
echo
echo -e "$(ifconfig | grep -oP 'inet \K\d+\.\d+\.\d+\.\d+' | awk '{print "IP4v:\t\t" $0}')"
echo
echo -e "$(ifconfig | grep -oP 'netmask \K\d+\.\d+\.\d+\.\d+' | awk '{print "Netmask:\t" $0}')"
echo
echo -e "$(ifconfig | grep -oP 'broadcast \K\d+\.\d+\.\d+\.\d+' | awk '{print "Broadcast:\t" $0}')"
echo
echo -e "$(ifconfig | grep -m 1 -oP 'inet6 \K([0-9A-Fa-f:]+)' | awk '{print "IP6v:\t\t" $0}')"
echo
echo -e "$(ip route show default | awk '{print "Default gateway: "$3}')"
echo 
cat -e /etc/resolv.conf | grep "nameserver" | awk '{print "nameserver:\t" $2}'


# -oP = vr√°t√≠ pouze nalezen√© odpov√≠daj√≠c√≠ ƒç√°sti ≈ô√°dku (ne cel√Ω ≈ô) a P umo≈æn√≠ \K
# \K = zahod√≠ v≈°e co je p≈ôed ether
# [0-9A-Fa-f] = regul√°rn√≠ v√Ωraz, kter√Ω odpov√≠d√° hexadecimalnimu znaku
# {2} = p≈ôesnƒõ 2 znaky
# [:-] = bude oddƒõlen√Ω dvojteƒçkou nebo pomlƒçkou
# {5} = najde prvn√≠ch 5 blok≈Ø
# na konci p≈ôid√°m je≈°tƒõ jednou regularni vyraz kdyby byla mac adresa delsi nez 5 hegadecimalnich znaku
# {0} = u printu pouzijeme prvni vyraz (je prvni protoze jsme pouzili \K ktery zahodil ether)
echo -e "$(ifconfig | grep -oP 'ether \K([0-9A-Fa-f]{2}[:-]){5}[0-9A-Fa-f]{2}' | awk '{print "MAC adresa:\t" $0}')"
echo
#echo "======================================================================================="
#echo "======================================================================================="
#echo
# timeout -s SIGINT 10 ping google.com
echo
echo "============================================================================================================================================="
echo "                                                        V√Ωsledky spu≈°tƒõn√≠ skriptu                                                            "
echo "============================================================================================================================================="
echo


### FUNKCE - N√°povƒõda ###

show_help () {
    echo "========================================================================================================================================="
	echo -e "\nSpu≈°tƒõn√≠ souboru: \t$0"
    echo -e "\nZvolen√≠ operace: \tdirMake"
    echo -e "\nCesta adres√°≈ôe: \ttmp/nazev_slozky"
    echo -e "\nPojmenov√°n√≠ souboru: \tnazev.sh"
    echo -e "\nVzorov√Ω p≈ô√≠kaz: \t$0 dirMake /tmp/nova_slozka nazev_souboru"
	echo
}


### FUNKCE - Chce≈° n√°povƒõdu ? ###

answer () {
    echo -e "\nAhoj, pro spr√°vn√© chov√°n√≠ skriptu mus√≠≈° postupovat podle jasn√©ho zad√°n√≠.\nChce≈° z√≠skat v√≠ce informac√≠? [y/n]"
    read -s -n 1 ANSWER
    echo
        if [[ "$ANSWER" == "y" || "$ANSWER" == "Y" ]]; then
            show_help
        elif [[ "$ANSWER" == "n" || "$ANSWER" == "N" ]]; then
            echo
            exit 1
        else
            echo -e "\nP≈ô√≠kaz "$ANSWER" bohu≈æel nezn√°m, zkus to znovu."
            echo
        fi
} 


### Vytvo≈ôen√≠ souboru pro ukl√°d√°n√≠ log≈Ø ###
touch ~/bee_homework/app.log
LOG_FILE="$HOME/bee_homework/app.log"

### Parsov√°n√≠ vstupn√≠ch parametr≈Ø a ulo≈æen√≠ do promƒõnn√Ωch ###
PARAM1="$2"
PARAM2="$3"

### Ulo≈æen√≠ cesty pro soft_link && hard_link do promƒõnn√Ωch PATH_SOFT && PATH_HARD ###
PATH_SOFT="/tmp/$3_soft"
PATH_HARD="/tmp/$3_hard"


### üü¢ FUNKCE PRO GENEROV√ÅN√ç DAL≈†√ç VERZE DOCKER IMAGE üü¢ ###
get_next_version() {
    local image_name="$1"
    
    # Z√≠sk√°me seznam existuj√≠c√≠ch verz√≠ pro dan√Ω image (jen tagy konƒç√≠c√≠ na .0)
    existing_versions=$(docker images --format "{{.Tag}}" "$image_name" | grep -E '^[0-9]+\.0$' | sort -V)
    
    # Pokud ≈æ√°dn√° verze neexistuje, zaƒçneme od 1.0
    if [[ -z "$existing_versions" ]]; then
        echo "1.0"
        return
    fi

    # Z√≠sk√°me nejvy≈°≈°√≠ existuj√≠c√≠ verzi
    last_version=$(echo "$existing_versions" | tail -n 1)

    # Extrahujeme ƒç√≠slo verze a zv√Ω≈°√≠me o 1
    next_version=$(( ${last_version%.*} + 1 )).0

    echo "$next_version"
}

### üü¢ FUNKCE PRO BUILD DOCKER IMAGE S AUTOMATICKOU VERZ√ç üü¢ ###
docker_build_image() {
    IMAGE_NAME="$1"
    IMAGE_VERSION=$(get_next_version "$IMAGE_NAME")

    echo "üì¶ Building Docker image: $IMAGE_NAME:$IMAGE_VERSION"
    docker build --no-cache -t "$IMAGE_NAME:$IMAGE_VERSION" .
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Build image: $IMAGE_NAME:$IMAGE_VERSION byl √∫spƒõ≈°n√Ω."
        echo -e "$(date) $(whoami) \tDocker build image: $IMAGE_NAME:$IMAGE_VERSION byl √∫spƒõ≈°n√Ω." >> "$LOG_FILE"
        echo
    else
        echo "‚ùå ERROR: Docker build nebyl √∫spƒõ≈°n√Ω!"
        echo -e "$(date) $(whoami) \tERROR: Docker build nebyl √∫spƒõ≈°n√Ω!" >> "$LOG_FILE"
        echo
        exit 1
    fi
}

### üü¢ FUNKCE PRO SMAZ√ÅN√ç DOCKER IMAGE üü¢ ###

docker_remove_image () {
    IMAGE_NAME="$1"
    echo "Prob√≠h√° odstra≈àov√°n√≠ Docker image: $IMAGE_NAME"
    echo
    docker rmi -f "$IMAGE_NAME"

    if [ $? == 0 ]; then
        echo "‚úÖ Docker image $IMAGE_NAME byl √∫spƒõ≈°nƒõ odstranƒõn."
        echo -e "$(date) $(whoami) \tDocker image $IMAGE_NAME byl √∫spƒõ≈°nƒõ odstranƒõn." >> "$LOG_FILE"
        echo
    else
        echo "‚ùå Docker image $IMAGE_NAME se nepoda≈ôilo odstranit."
        echo -e "$(date) $(whoami) \tDocker image $IMAGE_NAME se nepoda≈ôilo odstranit." >> "$LOG_FILE"
        echo
    fi
}

### üü¢ FUNKCE PRO KONTROLU, ≈ΩE DOCKER IMAGE EXISTUJE üü¢ ###

docker_image_check () {
    local IMAGE_NAME="$1"
    
    if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "${IMAGE_NAME}"; then
        return 0
    else
        echo "‚ùå ERROR: Docker image neexistuje!"
        echo -e "$(date) $(whoami) \tERROR: Docker image neexistuje." >> "$LOG_FILE"
        echo
        return 1
    fi
}




### üü¢ FUNKCE PRO VYTVO≈òEN√ç SOFT LINKU üü¢ ###
create_soft_link() {
    if [ -e "${PATH_SOFT}" ]; then
        if [ -L "${PATH_SOFT}" ]; then
            echo -e "\nERROR: Soft link ji≈æ existuje."
            echo -e "$(date) $(whoami) \tERROR: Soft link ji≈æ existuje." >> "$LOG_FILE"
            echo
        else
            echo -e "\nERROR: Soft link ji≈æ existuje, ale nen√≠ to link. P≈ôepisuji..."
            echo -e "$(date) $(whoami) \tERROR: Soft link ji≈æ existuje, ale nen√≠ to link. P≈ôepisuji..." >> "$LOG_FILE"
            rm -f "$PATH_SOFT"
            ln -s "$PARAM1/$PARAM2.sh" "$PATH_SOFT"
            echo -e "\n‚úÖ Soft link byl vytvo≈ôen: $PATH_SOFT"
            echo -e "$(date) $(whoami) \tSoft link byl vytvo≈ôen: $PATH_SOFT" >> "$LOG_FILE"
            echo
        fi
    else
        ln -s "$PARAM1/$PARAM2.sh" "$PATH_SOFT"
        echo -e "\n‚úÖ Soft link byl vytvo≈ôen: $PATH_SOFT"
        echo -e "$(date) $(whoami) \tSoft link byl vytvo≈ôen: $PATH_SOFT" >> "$LOG_FILE"
        echo
    fi
}

### üü¢ FUNKCE PRO VYTVO≈òEN√ç HARD LINKU üü¢ ###
create_hard_link() {
    if [ -e "${PATH_HARD}" ]; then
        echo -e "\nERROR: Hard link ji≈æ existuje."
        echo -e "$(date) $(whoami) \tERROR: Hard link ji≈æ existuje." >> "$LOG_FILE"
        echo
    else
        ln "$PARAM1/$PARAM2.sh" "$PATH_HARD"
        if [ $? -eq 0 ]; then
            echo -e "\n‚úÖ Hard link byl vytvo≈ôen: $PATH_HARD"
            echo -e "$(date) $(whoami) \tHard link byl vytvo≈ôen: $PATH_HARD" >> "$LOG_FILE"
            echo
        else
            echo -e "\nERROR: Hard link $PATH_HARD se nepoda≈ôilo vytvo≈ôit."
            echo -e "$(date) $(whoami) \tERROR: Hard link $PATH_HARD se nepoda≈ôilo vytvo≈ôit." >> "$LOG_FILE"
            echo
            exit 1
        fi
    fi
}

# Kontrola, zda byl zad√°n alespo≈à jeden argument
if [ $# -lt 1 ]; then
    echo -e "\nERROR: Nedostateƒçn√Ω poƒçet vstupn√≠ch parametr≈Ø."
    echo -e "$(date) $(whoami) \tERROR: Nedostateƒçn√Ω poƒçet vstupn√≠ch parametr≈Ø." >> "$LOG_FILE"
    echo
    exit 1

# Pokud prvn√≠ argument je "dirMake", vytvo≈ô√≠me adres√°≈ô
elif [ "$1" == "dirMake" ]; then
    if [[ -z "$2" || ! "$2" =~ ^/tmp/.+ ]]; then
        echo -e "\nERROR! Mus√≠≈° zadat spr√°vnƒõ cestu, kde se m√° adres√°≈ô vytvo≈ôit."
        echo -e "$(date) $(whoami) \tERROR! Mus√≠≈° zadat spr√°vnƒõ cestu, kde se m√° adres√°≈ô vytvo≈ôit." >> "$LOG_FILE"
        echo
        exit 1
    elif [ -z "$3" ]; then
        echo -e "\nERROR! Mus√≠≈° zadat n√°zev souboru, kter√Ω chce≈° vytvo≈ôit."
        echo -e "$(date) $(whoami) \tERROR! Mus√≠≈° zadat n√°zev souboru, kter√Ω chce≈° vytvo≈ôit." >> "$LOG_FILE"
        echo
        exit 1
    elif [ -e "$PARAM1" ]; then
        echo -e "\nERROR: Adres√°≈ô $PARAM1 ji≈æ existuje. Zvol si jin√Ω n√°zev."
        echo -e "$(date) $(whoami) \tERROR: Adres√°≈ô $PARAM1 ji≈æ existuje. Zvol si jin√Ω n√°zev." >> "$LOG_FILE"
        echo
        exit 1
    else
        mkdir -p "$PARAM1"
        if [ $? -eq 0 ]; then
            echo -e "\n‚úÖ Adres√°≈ô '$2' byl spr√°vnƒõ vytvo≈ôen."
            echo -e "$(date) $(whoami) \tAdres√°≈ô '$2' byl spr√°vnƒõ vytvo≈ôen." >> "$LOG_FILE"
            echo

            # Vytvo≈ôen√≠ souboru
            cat <<EOF > "$PARAM1/$PARAM2.sh"
#!/bin/bash
# V√Ωpis n√°zvu operaƒçn√≠ho syst√©mu
echo
echo "==============================================="
echo "               Syst√©mov√© informace             "
echo "==============================================="
echo "N√°zev operaƒçn√≠ho syst√©mu: \$(uname -s)"
echo "Verze operaƒçn√≠ho syst√©mu: \$(uname -v)"
echo "Verze kernelu: \$(uname -r)"
echo "-----------------------------------------------"

# Technick√© informace o syst√©mu a hardwaru
echo "Informace o syst√©mu:"
echo "  CPU: \$(lscpu | grep 'Model name')"
echo "  Poƒçet jader CPU: \$(nproc)"
echo "  Pamƒõ≈• RAM: \$(free -h | grep 'Mem' | awk '{print \$2}')"
echo "-----------------------------------------------"

# Informace o u≈æivatelsk√©m √∫ƒçtu
echo "U≈æivatelsk√Ω √∫ƒçet:"
echo "  P≈ôihl√°≈°en√Ω u≈æivatel: \$(whoami)"
echo "  Domovsk√Ω adres√°≈ô: \$HOME"
echo "  Syst√©mov√Ω ƒças: \$(date)"
echo "-----------------------------------------------"

# Informace o IP adrese
echo -e "Aktu√°ln√≠ IP adresa: \n\$(ipconfig.exe | grep 'IPv4')"
echo ping beeit.cz
echo nslookup beeit.cz
EOF

            if [ $? -eq 0 ]; then
                echo -e "\n‚úÖ Soubor '$3' byl √∫spƒõ≈°nƒõ vytvo≈ôen v adres√°≈ôi '$2'."
                echo -e "$(date) $(whoami) \tSoubor '$3' byl √∫spƒõ≈°nƒõ vytvo≈ôen v adres√°≈ôi '$2'." >> "$LOG_FILE"
                echo

                # üü¢ Zavol√°n√≠ funkc√≠ pro vytvo≈ôen√≠ soft a hard linku üü¢
                create_soft_link
                create_hard_link

            else
                echo -e "\nERROR: Nepoda≈ôilo se vytvo≈ôit soubor '$3'."
                echo -e "$(date) $(whoami) \tSoubor '$3' se nepoda≈ôilo vytvo≈ôit." >> "$LOG_FILE"
                echo
                exit 1
            fi
        else
            echo -e "\nERROR: Nepoda≈ôilo se vytvo≈ôit adres√°≈ô '$2'."
            echo -e "$(date) $(whoami) \tAdres√°≈ô '$2' se nepoda≈ôilo vytvo≈ôit." >> "$LOG_FILE"
            echo
            exit 1
        fi
    fi

# Pokud prvn√≠ argument je "docker", spust√≠me build
elif [ "$1" == "--build-docker" ]; then
    if [ -e "Dockerfile" ]; then
        if [ -z "$3" ]; then
            echo "‚ùå ERROR: Nezadal si n√°zev Docker image."
            echo -e "$(date) $(whoami) \tERROR: Nezadal si n√°zev Docker image nutn√Ω pro korektn√≠ build." >> "$LOG_FILE"
            echo
        fi
    docker_build_image "$3" #POZOR! zde je spr√°vnƒõ uveden parametr $3 (pro z√≠sk√°n√≠ jm√©na image), ve funkci, kter√© to p≈ôed√°v√°m je to v≈°ak parametr $1 
    echo
    else
        echo "‚ùå ERROR: Dockerfile neexistuje!"
        echo -e "$(date) $(whoami) \tERROR: Dockerfile se v adres√°≈ôi nepoda≈ôilo nal√©zt." >> "$LOG_FILE"
        echo
        exit 1
    fi
elif [ "$1" == "--remove-image" ]; then
        if [ -z "$3" ]; then
            echo "‚ùå ERROR: Nezadal si n√°zev Docker image."
            echo -e "$(date) $(whoami) \tERROR: Nezadal si n√°zev Docker image nutn√Ω pro jeho korektn√≠ odstranƒõn√≠." >> "$LOG_FILE"
            echo
            exit 1
        else
            docker_image_check "$3"
            result=$?
            if [ $result -eq 0 ]; then
                docker_remove_image "$3" #POZOR! zde je spr√°vnƒõ uveden parametr $3 (pro z√≠sk√°n√≠ jm√©na image), ve funkci, kter√© to p≈ôed√°v√°m je to v≈°ak parametr $1 
                echo
            else
                echo "‚ùå ERROR: Docker image nebyl nalezen a proto nem≈Ø≈æe b√Ωt odstranƒõn."
                echo -e "$(date) $(whoami) \tERROR: Docker image nebyl nalezen a proto nem≈Ø≈æe b√Ωt odstranƒõn." >> "$LOG_FILE"
                echo
            fi
        fi    
elif [ "$1" == "--show-container" ]; then
    docker ps -a
    echo
# Nezn√°m√Ω p≈ô√≠kaz
else
    echo -e "\nERROR: '$1' p≈ô√≠kaz nezn√°m."
    echo -e "$(date) $(whoami) \tERROR: P≈ô√≠kaz '$1' nezn√°m." >> "$LOG_FILE"
    exit 1
fi


